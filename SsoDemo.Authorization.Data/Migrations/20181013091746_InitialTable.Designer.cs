// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SsoDemo.Authorization.Domain.Model;

namespace SsoDemo.Authorization.Data.Migrations
{
    [DbContext(typeof(AuthorizationContext))]
    [Migration("20181013091746_InitialTable")]
    partial class InitialTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.Clients", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Secret")
                        .IsRequired();

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.ClientScopeAllocations", b =>
                {
                    b.Property<int>("ClientRoleAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("ScopeId");

                    b.HasKey("ClientRoleAllocationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ClientScopeAllocations");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.Scopes", b =>
                {
                    b.Property<int>("ScopeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Access");

                    b.Property<string>("Api");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Method");

                    b.Property<string>("System")
                        .IsRequired();

                    b.HasKey("ScopeId");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.UserAccounts", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("DomainId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.UserAccountScopeAllocations", b =>
                {
                    b.Property<int>("UserAccountScopeAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScopeId");

                    b.Property<int>("UserAccountId");

                    b.HasKey("UserAccountScopeAllocationId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccountScopeAllocations");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.UserGrantedClientScopeAllocations", b =>
                {
                    b.Property<int>("UserGrantedClientScopeAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("ScopeId");

                    b.Property<int>("UserAccountId");

                    b.HasKey("UserGrantedClientScopeAllocationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserGrantedClientScopeAllocations");
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.ClientScopeAllocations", b =>
                {
                    b.HasOne("SsoDemo.Authorization.Domain.Model.Clients", "Client")
                        .WithMany("ClientScopeAllocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SsoDemo.Authorization.Domain.Model.Scopes", "Scope")
                        .WithMany("ClientScopeAllocations")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.UserAccountScopeAllocations", b =>
                {
                    b.HasOne("SsoDemo.Authorization.Domain.Model.Scopes", "Scope")
                        .WithMany("UserAccountRoleAllocations")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SsoDemo.Authorization.Domain.Model.UserAccounts", "UserAccount")
                        .WithMany("UserAccountRoleAllocations")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SsoDemo.Authorization.Domain.Model.UserGrantedClientScopeAllocations", b =>
                {
                    b.HasOne("SsoDemo.Authorization.Domain.Model.Clients", "Client")
                        .WithMany("UserGrantedClientScopeAllocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SsoDemo.Authorization.Domain.Model.Scopes", "Scope")
                        .WithMany("UserGrantedClientScopeAllocations")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SsoDemo.Authorization.Domain.Model.UserAccounts", "UserAccount")
                        .WithMany("UserGrantedClientScopeAllocations")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
